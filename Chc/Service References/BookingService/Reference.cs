//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Chc.BookingService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BookingService.IBookingService")]
    public interface IBookingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookingService/GetServiceById", ReplyAction="http://tempuri.org/IBookingService/GetServiceByIdResponse")]
        ChcObjects.Service GetServiceById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookingService/GetServiceById", ReplyAction="http://tempuri.org/IBookingService/GetServiceByIdResponse")]
        System.Threading.Tasks.Task<ChcObjects.Service> GetServiceByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookingService/GetServices", ReplyAction="http://tempuri.org/IBookingService/GetServicesResponse")]
        ChcObjects.Service[] GetServices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookingService/GetServices", ReplyAction="http://tempuri.org/IBookingService/GetServicesResponse")]
        System.Threading.Tasks.Task<ChcObjects.Service[]> GetServicesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookingService/CreateService", ReplyAction="http://tempuri.org/IBookingService/CreateServiceResponse")]
        ChcObjects.Service CreateService(ChcObjects.Service service, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookingService/CreateService", ReplyAction="http://tempuri.org/IBookingService/CreateServiceResponse")]
        System.Threading.Tasks.Task<ChcObjects.Service> CreateServiceAsync(ChcObjects.Service service, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookingService/UpdateService", ReplyAction="http://tempuri.org/IBookingService/UpdateServiceResponse")]
        ChcObjects.Service UpdateService(ChcObjects.Service service, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookingService/UpdateService", ReplyAction="http://tempuri.org/IBookingService/UpdateServiceResponse")]
        System.Threading.Tasks.Task<ChcObjects.Service> UpdateServiceAsync(ChcObjects.Service service, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookingService/GetContainers", ReplyAction="http://tempuri.org/IBookingService/GetContainersResponse")]
        ChcObjects.Container[] GetContainers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookingService/GetContainers", ReplyAction="http://tempuri.org/IBookingService/GetContainersResponse")]
        System.Threading.Tasks.Task<ChcObjects.Container[]> GetContainersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookingService/GetCarriers", ReplyAction="http://tempuri.org/IBookingService/GetCarriersResponse")]
        ChcObjects.Carrier[] GetCarriers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookingService/GetCarriers", ReplyAction="http://tempuri.org/IBookingService/GetCarriersResponse")]
        System.Threading.Tasks.Task<ChcObjects.Carrier[]> GetCarriersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookingService/GetScheduleFrequncies", ReplyAction="http://tempuri.org/IBookingService/GetScheduleFrequnciesResponse")]
        ChcObjects.ScheduleFrequency[] GetScheduleFrequncies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookingService/GetScheduleFrequncies", ReplyAction="http://tempuri.org/IBookingService/GetScheduleFrequnciesResponse")]
        System.Threading.Tasks.Task<ChcObjects.ScheduleFrequency[]> GetScheduleFrequnciesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookingService/GetDisposalLocations", ReplyAction="http://tempuri.org/IBookingService/GetDisposalLocationsResponse")]
        ChcObjects.DisposalLocation[] GetDisposalLocations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookingService/GetDisposalLocations", ReplyAction="http://tempuri.org/IBookingService/GetDisposalLocationsResponse")]
        System.Threading.Tasks.Task<ChcObjects.DisposalLocation[]> GetDisposalLocationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookingService/GetEWCs", ReplyAction="http://tempuri.org/IBookingService/GetEWCsResponse")]
        ChcObjects.EWC[] GetEWCs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookingService/GetEWCs", ReplyAction="http://tempuri.org/IBookingService/GetEWCsResponse")]
        System.Threading.Tasks.Task<ChcObjects.EWC[]> GetEWCsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBookingServiceChannel : Chc.BookingService.IBookingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BookingServiceClient : System.ServiceModel.ClientBase<Chc.BookingService.IBookingService>, Chc.BookingService.IBookingService {
        
        public BookingServiceClient() {
        }
        
        public BookingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BookingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BookingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BookingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ChcObjects.Service GetServiceById(int id) {
            return base.Channel.GetServiceById(id);
        }
        
        public System.Threading.Tasks.Task<ChcObjects.Service> GetServiceByIdAsync(int id) {
            return base.Channel.GetServiceByIdAsync(id);
        }
        
        public ChcObjects.Service[] GetServices() {
            return base.Channel.GetServices();
        }
        
        public System.Threading.Tasks.Task<ChcObjects.Service[]> GetServicesAsync() {
            return base.Channel.GetServicesAsync();
        }
        
        public ChcObjects.Service CreateService(ChcObjects.Service service, int userId) {
            return base.Channel.CreateService(service, userId);
        }
        
        public System.Threading.Tasks.Task<ChcObjects.Service> CreateServiceAsync(ChcObjects.Service service, int userId) {
            return base.Channel.CreateServiceAsync(service, userId);
        }
        
        public ChcObjects.Service UpdateService(ChcObjects.Service service, int userId) {
            return base.Channel.UpdateService(service, userId);
        }
        
        public System.Threading.Tasks.Task<ChcObjects.Service> UpdateServiceAsync(ChcObjects.Service service, int userId) {
            return base.Channel.UpdateServiceAsync(service, userId);
        }
        
        public ChcObjects.Container[] GetContainers() {
            return base.Channel.GetContainers();
        }
        
        public System.Threading.Tasks.Task<ChcObjects.Container[]> GetContainersAsync() {
            return base.Channel.GetContainersAsync();
        }
        
        public ChcObjects.Carrier[] GetCarriers() {
            return base.Channel.GetCarriers();
        }
        
        public System.Threading.Tasks.Task<ChcObjects.Carrier[]> GetCarriersAsync() {
            return base.Channel.GetCarriersAsync();
        }
        
        public ChcObjects.ScheduleFrequency[] GetScheduleFrequncies() {
            return base.Channel.GetScheduleFrequncies();
        }
        
        public System.Threading.Tasks.Task<ChcObjects.ScheduleFrequency[]> GetScheduleFrequnciesAsync() {
            return base.Channel.GetScheduleFrequnciesAsync();
        }
        
        public ChcObjects.DisposalLocation[] GetDisposalLocations() {
            return base.Channel.GetDisposalLocations();
        }
        
        public System.Threading.Tasks.Task<ChcObjects.DisposalLocation[]> GetDisposalLocationsAsync() {
            return base.Channel.GetDisposalLocationsAsync();
        }
        
        public ChcObjects.EWC[] GetEWCs() {
            return base.Channel.GetEWCs();
        }
        
        public System.Threading.Tasks.Task<ChcObjects.EWC[]> GetEWCsAsync() {
            return base.Channel.GetEWCsAsync();
        }
    }
}
